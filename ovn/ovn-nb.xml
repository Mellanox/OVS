<?xml version="1.0" encoding="utf-8"?>
<database name="ovn-nb" title="OVN Northbound Database">
  <p>
    This database is the interface between OVN and the cloud management system
    (CMS), such as OpenStack, running above it.  The CMS produces almost all of
    the contents of the database.  The <code>ovn-northd</code> program
    monitors the database contents, transforms it, and stores it into the <ref
    db="OVN_Southbound"/> database.
  </p>

  <p>
    We generally speak of ``the'' CMS, but one can imagine scenarios in
    which multiple CMSes manage different parts of an OVN deployment.
  </p>

  <h2>External IDs</h2>

  <p>
    Each of the tables in this database contains a special column, named
    <code>external_ids</code>.  This column has the same form and purpose each
    place it appears.
  </p>

  <dl>
    <dt><code>external_ids</code>: map of string-string pairs</dt>
    <dd>
      Key-value pairs for use by the CMS.  The CMS might use certain pairs, for
      example, to identify entities in its own configuration that correspond to
      those in this database.
    </dd>
  </dl>

  <table name="NB_Global" title="Northbound configuration">
    <p>
      Northbound configuration for an OVN system.  This table must have exactly
      one row.
    </p>

    <group title="Status">
      These columns allow a client to track the overall configuration state of
      the system.

      <column name="nb_cfg">
        Sequence number for client to increment.  When a client modifies any
        part of the northbound database configuration and wishes to wait for
        <code>ovn-northd</code> and possibly all of the hypervisors to finish
        applying the changes, it may increment this sequence number.
      </column>

      <column name="sb_cfg">
        Sequence number that <code>ovn-northd</code> sets to the value of <ref
        column="nb_cfg"/> after it finishes applying the corresponding
        configuration changes to the <ref db="OVN_Southbound"/> database.
      </column>

      <column name="hv_cfg">
        Sequence number that <code>ovn-northd</code> sets to the smallest
        sequence number of all the chassis in the system, as reported in the
        <code>Chassis</code> table in the southbound database.  Thus, <ref
        column="hv_cfg"/> equals <ref column="nb_cfg"/> if all chassis are
        caught up with the northbound configuration (which may never happen, if
        any chassis is down).  This value can regress, if a chassis was removed
        from the system and rejoins before catching up.
      </column>
    </group>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>

    <group title="Common options">
      <column name="options">
        This column provides general key/value settings. The supported
        options are described individually below.
      </column>

      <group title="Options for configuring BFD">
        <p>
          These options apply when <code>ovn-controller</code> configures
          BFD on tunnels interfaces.
        </p>

        <column name="options" key="bfd-min-rx">
          BFD option <code>min-rx</code> value to use when configuring BFD on
          tunnel interfaces.
        </column>

        <column name="options" key="bfd-decay-min-rx">
          BFD option <code>decay-min-rx</code> value to use when configuring
          BFD on tunnel interfaces.
        </column>

        <column name="options" key="bfd-min-tx">
          BFD option <code>min-tx</code> value to use when configuring BFD on
          tunnel interfaces.
        </column>

        <column name="options" key="bfd-mult">
          BFD option <code>mult</code> value to use when configuring BFD on
          tunnel interfaces.
        </column>
      </group>

      <column name="options" key="mac_prefix">
        Configure a given OUI to be used as prefix when L2 address is
        dynamically assigned, e.g. <code>00:11:22</code>
      </column>
    </group>

    <group title="Connection Options">
      <column name="connections">
        Database clients to which the Open vSwitch database server should
        connect or on which it should listen, along with options for how these
        connections should be configured.  See the <ref table="Connection"/>
        table for more information.
      </column>
      <column name="ssl">
        Global SSL configuration.
      </column>
    </group>
    <group title="Security Configurations">
      <column name="ipsec">
        Tunnel encryption configuration. If this column is set to be true, all
        OVN tunnels will be encrypted with IPsec.
      </column>
    </group>
  </table>

  <table name="Logical_Switch" title="L2 logical switch">
    <p>
      Each row represents one L2 logical switch.
    </p>

    <p>
      There are two kinds of logical switches, that is, ones that fully
      virtualize the network (overlay logical switches) and ones that provide
      simple connectivity to a physical network (bridged logical switches).
      They work in the same way when providing connectivity between logical
      ports on same chasis, but differently when connecting remote logical
      ports.  Overlay logical switches connect remote logical ports by tunnels,
      while bridged logical switches provide connectivity to remote ports by
      bridging the packets to directly connected physical L2 segment with the
      help of <code>localnet</code> ports.  Each bridged logical switch has
      one and only one <code>localnet</code> port, which has only one special
      address <code>unknown</code>.
    </p>

    <column name="ports">
      <p>
        The logical ports connected to the logical switch.
      </p>

      <p>
        It is an error for multiple logical switches to include the same
        logical port.
      </p>
    </column>

    <column name="load_balancer">
      Load balance a virtual ip address to a set of logical port endpoint
      ip addresses.
    </column>

    <column name="acls">
      Access control rules that apply to packets within the logical switch.
    </column>

    <column name="qos_rules">
      QoS marking and metering rules that apply to packets within the
      logical switch.
    </column>

    <column name="dns_records">
      This column defines the DNS records to be used for resolving internal
      DNS queries within the logical switch by the native DNS resolver.
      Please see the <ref table="DNS"/> table.
    </column>

    <group title="Naming">
      <p>
        These columns provide names for the logical switch.  From OVN's
        perspective, these names have no special meaning or purpose other than
        to provide convenience for human interaction with the  database.
        There is no requirement for the name to be unique.  (For a unique
        identifier for a logical switch, use its row UUID.)
      </p>

      <p>
        (Originally, <ref column="name"/> was intended to serve the purpose of
        a human-friendly name, but the Neutron integration used it to uniquely
        identify its own switch object, in the format
        <code>neutron-<var>uuid</var></code>.  Later on, Neutron started
        propagating the friendly name of a switch as <ref column="external_ids"
        key="neutron:network_name"/>.  Perhaps this can be cleaned up someday.)
      </p>

      <column name="name">
        A name for the logical switch.
      </column>

      <column name="external_ids" key="neutron:network_name">
        Another name for the logical switch.
      </column>
    </group>

    <group title="IP Address Assignment">
      <p>
        These options control automatic IP address management (IPAM) for ports
        attached to the logical switch.  To enable IPAM for IPv4, set <ref
        column="other_config" key="subnet"/> and optionally <ref
        column="other_config:exclude_ips"/>.  To enable IPAM for IPv6, set
        <ref column="other_config" key="ipv6_prefix"/>.  IPv4 and IPv6 may
        be enabled together or separately.
      </p>

      <p>
        To request dynamic address assignment for a particular port, use the
        <code>dynamic</code> keyword in the <ref table="Logical_Switch_Port"
        column="addresses"/> column of the port's <ref
        table="Logical_Switch_Port"/> row.  This requests both an IPv4 and an
        IPv6 address, if IPAM for IPv4 and IPv6 are both enabled.
      </p>

      <column name="other_config" key="subnet">
        Set this to an IPv4 subnet, e.g. <code>192.168.0.0/24</code>, to enable
        <code>ovn-northd</code> to automatically assign IP addresses within
        that subnet.
      </column>

      <column name="other_config" key="exclude_ips">
        <p>
          To exclude some addresses from automatic IP address management, set
          this to a list of the IPv4 addresses or <code>..</code>-delimited
          ranges to exclude.  The addresses or ranges should be a subset of
          those in <ref column="other_config" key="subnet"/>.
        </p>
        <p>
          Whether listed or not, <code>ovn-northd</code> will never allocate
          the first or last address in a subnet, such as 192.168.0.0 or
          192.168.0.255 in 192.168.0.0/24.
        </p>
        <p>
          Examples:
        </p>
        <ul>
          <li><code>192.168.0.2 192.168.0.10</code></li>
          <li><code>192.168.0.4 192.168.0.30..192.168.0.60 192.168.0.110..192.168.0.120</code></li>
          <li><code>192.168.0.110..192.168.0.120 192.168.0.25..192.168.0.30 192.168.0.144</code></li>
        </ul>
      </column>

      <column name="other_config" key="ipv6_prefix">
        Set this to an IPv6 prefix to enable <code>ovn-northd</code> to
        automatically assign IPv6 addresses using this prefix.  The assigned
        IPv6 address will be generated using the IPv6 prefix and the MAC
        address (converted to an IEEE EUI64 identifier) of the port.  The IPv6
        prefix defined here should be a valid IPv6 address ending with
        <code>::</code>.
        <p>
          Examples:
        </p>
        <ul>
          <li><code>aef0::</code></li>
          <li><code>bef0:1234:a890:5678::</code></li>
          <li><code>8230:5678::</code></li>
        </ul>
      </column>

      <column name="other_config" key="mac_only" type='{"type": "boolean"}'>
        Value used to request to assign L2 address only if neither subnet
        nor ipv6_prefix are specified
      </column>
    </group>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="Logical_Switch_Port" title="L2 logical switch port">
    <p>
      A port within an L2 logical switch.
    </p>

    <group title="Core Features">
      <column name="name">
        <p>
          The logical port name.
        </p>

        <p>
          For entities (VMs or containers) that are spawned in the hypervisor,
          the name used here must match those used in the <ref key="iface-id"
          table="Interface" column="external_ids" db="Open_vSwitch"/> in the
          <ref db="Open_vSwitch"/> database's <ref table="Interface"
          db="Open_vSwitch"/> table, because hypervisors use <ref key="iface-id"
          table="Interface" column="external_ids" db="Open_vSwitch"/> as a lookup
          key to identify the network interface of that entity.
        </p>

        <p>
          For containers that share a VIF within a VM, the name can be any
          unique identifier.  See <code>Containers</code>, below, for more
          information.
        </p>
      </column>

      <column name="type">
        <p>
          Specify a type for this logical port.  Logical ports can be used to
          model other types of connectivity into an OVN logical switch.  The
          following types are defined:
        </p>

        <dl>
          <dt>(empty string)</dt>
          <dd>
            A VM (or VIF) interface.
          </dd>

          <dt><code>router</code></dt>
          <dd>
            A connection to a logical router.
          </dd>

          <dt><code>localnet</code></dt>
          <dd>
            A connection to a locally accessible network from each
            <code>ovn-controller</code> instance.  A logical switch can only
            have a single <code>localnet</code> port attached.  This is used
            to model direct connectivity to an existing network.
          </dd>

          <dt><code>localport</code></dt>
          <dd>
            A connection to a local VIF. Traffic that arrives on a
            <code>localport</code> is never forwarded over a tunnel to another
            chassis. These ports are present on every chassis and have the same
            address in all of them. This is used to model connectivity to local
            services that run on every hypervisor.
          </dd>

          <dt><code>l2gateway</code></dt>
          <dd>
            A connection to a physical network.
          </dd>

          <dt><code>vtep</code></dt>
          <dd>
            A port to a logical switch on a VTEP gateway.
          </dd>
        </dl>
      </column>
    </group>

    <group title="Options">
      <column name="options">
        This column provides key/value settings specific to the logical port
        <ref column="type"/>.  The type-specific options are described
        individually below.
      </column>

      <group title="Options for router ports">
        <p>
          These options apply when <ref column="type"/> is <code>router</code>.
        </p>

        <column name="options" key="router-port">
          Required.  The <ref column="name"/> of the <ref
          table="Logical_Router_Port"/> to which this logical switch port is
          connected.
        </column>

        <column name="options" key="nat-addresses">
          <p>
            This is used to send gratuitous ARPs for SNAT and DNAT IP
            addresses via the <code>localnet</code> port that is attached
            to the same logical switch as this type <code>router</code>
            port.  This option is specified on a logical switch port that is
            connected to a gateway router, or a logical switch port that is
            connected to a distributed gateway port on a logical router.
          </p>

          <p>
            This must take one of the following forms:
          </p>

          <dl>
            <dt><code>router</code></dt>
            <dd>
              <p>
                Gratuitous ARPs will be sent for all SNAT and DNAT external IP
                addresses and for all load balancer IP addresses defined on the
                <ref column="options" key="router-port"/>'s logical router,
                using the <ref column="options" key="router-port"/>'s MAC
                address.
              </p>

              <p>
                This form of <ref column="options" key="nat-addresses"/> is
                valid for logical switch ports where <ref column="options"
                key="router-port"/> is the name of a port on a gateway router,
                or the name of a distributed gateway port.
              </p>

              <p>
                Supported only in OVN 2.8 and later.  Earlier versions required
                NAT addresses to be manually synchronized.
              </p>
            </dd>

            <dt><code>Ethernet address followed by one or more IPv4 addresses</code></dt>
            <dd>
              <p>
                Example: <code>80:fa:5b:06:72:b7 158.36.44.22
                158.36.44.24</code>. This would result in generation of
                gratuitous ARPs for IP addresses 158.36.44.22 and 158.36.44.24
                with a MAC address of 80:fa:5b:06:72:b7.
              </p>

              <p>
                This form of <ref column="options" key="nat-addresses"/> is
                only valid for logical switch ports where <ref column="options"
                key="router-port"/> is the name of a port on a gateway router.
              </p>
            </dd>
          </dl>
        </column>
      </group>

      <group title="Options for localnet ports">
        <p>
          These options apply when <ref column="type"/> is
          <code>localnet</code>.
        </p>

        <column name="options" key="network_name">
          Required.  The name of the network to which the <code>localnet</code>
          port is connected.  Each hypervisor, via <code>ovn-controller</code>,
          uses its local configuration to determine exactly how to connect to
          this locally accessible network.
        </column>
      </group>

      <group title="Options for l2gateway ports">
        <p>
          These options apply when <ref column="type"/> is
          <code>l2gateway</code>.
        </p>

        <column name="options" key="network_name">
          Required.  The name of the network to which the <code>l2gateway</code>
          port is connected.  The L2 gateway, via <code>ovn-controller</code>,
          uses its local configuration to determine exactly how to connect to
          this network.
        </column>

        <column name="options" key="l2gateway-chassis">
          Required. The chassis on which the <code>l2gateway</code> logical
          port should be bound to. <code>ovn-controller</code> running on the
          defined chassis will connect this logical port to the physical network.
        </column>

      </group>

      <group title="Options for vtep ports">
        <p>
          These options apply when <ref column="type"/> is <code>vtep</code>.
        </p>

        <column name="options" key="vtep-physical-switch">
          Required.  The name of the VTEP gateway.
        </column>

        <column name="options" key="vtep-logical-switch">
          Required.  A logical switch name connected by the VTEP gateway.
        </column>
      </group>

      <group title="VMI (or VIF) Options">
        <p>
          These options apply to logical ports with <ref column="type"/> having
          (empty string)
        </p>

        <column name="options" key="requested-chassis">
          If set, identifies a specific chassis (by name or hostname) that
          is allowed to bind this port. Using this option will prevent
          thrashing between two chassis trying to bind the same port during
          a live migration. It can also prevent similar thrashing due to a
          mis-configuration, if a port is accidentally created on more than
          one chassis.
        </column>

        <column name="options" key="qos_max_rate">
          If set, indicates the maximum rate for data sent from this interface,
          in bit/s. The traffic will be shaped according to this limit.
        </column>

        <column name="options" key="qos_burst">
          If set, indicates the maximum burst size for data sent from this
          interface, in bits.
        </column>
      </group>
    </group>

    <group title="Containers">
      <p>
        When a large number of containers are nested within a VM, it may be too
        expensive to dedicate a VIF to each container.  OVN can use VLAN tags
        to support such cases.  Each container is assigned a VLAN ID and each
        packet that passes between the hypervisor and the VM is tagged with the
        appropriate ID for the container.  Such VLAN IDs never appear on a
        physical wire, even inside a tunnel, so they need not be unique except
        relative to a single VM on a hypervisor.
      </p>

      <p>
        These columns are used for VIFs that represent nested containers using
        shared VIFs.  For VMs and for containers that have dedicated VIFs, they
        are empty.
      </p>

      <column name="parent_name">
        The VM interface through which the nested container sends its network
        traffic.  This must match the <ref column="name"/> column for some
        other <ref table="Logical_Switch_Port"/>.
      </column>

      <column name="tag_request">
        <p>
          The VLAN tag in the network traffic associated with a container's
          network interface.  The client can request <code>ovn-northd</code>
          to allocate a tag that is unique within the scope of a specific
          parent (specified in <ref column="parent_name"/>) by setting a value
          of <code>0</code> in this column.  The allocated value is written
          by <code>ovn-northd</code> in the <ref column="tag"/> column.
          (Note that these tags are allocated and managed locally in
          <code>ovn-northd</code>, so they cannot be reconstructed in the event
          that the database is lost.)  The client can also request a specific
          non-zero tag and <code>ovn-northd</code> will honor it and copy that
          value to the <ref column="tag"/> column.
        </p>

        <p>
          When <ref column="type"/> is set to <code>localnet</code> or
          <code>l2gateway</code>, this can
          be set to indicate that the port represents a connection to a
          specific VLAN on a locally accessible network. The VLAN ID is used
          to match incoming traffic and is also added to outgoing traffic.
        </p>
      </column>

      <column name="tag">
        <p>
          The VLAN tag allocated by <code>ovn-northd</code> based on the
          contents of the <ref column="tag_request"/> column.
        </p>
      </column>
    </group>

    <group title="Port State">
      <column name="up">
        <p>
          This column is populated by <code>ovn-northd</code>, rather
          than by the CMS plugin as is most of this database.  When a
          logical port is bound to a physical location in the OVN
          Southbound database <ref db="OVN_Southbound"
          table="Binding"/> table, <code>ovn-northd</code> sets this
          column to <code>true</code>; otherwise, or if the port
          becomes unbound later, it sets it to <code>false</code>.
          This allows the CMS to wait for a VM's (or container's)
          networking to become active before it allows the VM (or
          container) to start.
        </p>

        <p>
          Logical ports of router type are an exception to this rule.
          They are considered to be always up, that is this column is
          always set to <code>true</code>.
        </p>
      </column>

      <column name="enabled">
        This column is used to administratively set port state.  If this column
        is empty or is set to <code>true</code>, the port is enabled.  If this
        column is set to <code>false</code>, the port is disabled.  A disabled
        port has all ingress and egress traffic dropped.
      </column>

    </group>

    <group title="Addressing">
      <column name="addresses">
        <p>
          Addresses owned by the logical port.
        </p>

        <p>
          Each element in the set must take one of the following forms:
        </p>

        <dl>
          <dt><code>Ethernet address followed by zero or more IPv4 or IPv6 addresses (or both)</code></dt>
          <dd>
            <p>
              An Ethernet address defined is owned by the logical port.
              Like a physical Ethernet NIC, a logical port ordinarily has
              a single fixed Ethernet address.
            </p>

            <p>
              When a OVN logical switch processes a unicast Ethernet frame
              whose destination MAC address is in a logical port's <ref
              column="addresses"/> column, it delivers it only to that port, as
              if a MAC learning process had learned that MAC address on the
              port.
            </p>

            <p>
              If IPv4 or IPv6 address(es) (or both) are defined, it indicates
              that the logical port owns the given IP addresses.
            </p>

            <p>
              If IPv4 address(es) are defined, the OVN logical switch uses this
              information to synthesize responses to ARP requests without
              traversing the physical network. The OVN logical router connected
              to the logical switch, if any, uses this information to avoid
              issuing ARP requests for logical switch ports.
            </p>

            <p>
              Note that the order here is important. The Ethernet address must
              be listed before the IP address(es) if defined.
            </p>

            <p>
              Examples:
            </p>

            <dl>
              <dt><code>80:fa:5b:06:72:b7</code></dt>
              <dd>
                This indicates that the logical port owns the above mac address.
              </dd>

              <dt><code>80:fa:5b:06:72:b7 10.0.0.4 20.0.0.4</code></dt>
              <dd>
                This indicates that the logical port owns the mac address and two
                IPv4 addresses.
              </dd>

              <dt><code>80:fa:5b:06:72:b7 fdaa:15f2:72cf:0:f816:3eff:fe20:3f41</code></dt>
              <dd>
                This indicates that the logical port owns the mac address and
                1 IPv6 address.
              </dd>

              <dt><code>80:fa:5b:06:72:b7 10.0.0.4 fdaa:15f2:72cf:0:f816:3eff:fe20:3f41</code></dt>
              <dd>
                This indicates that the logical port owns the mac address and
                1 IPv4 address and 1 IPv6 address.
              </dd>
            </dl>
          </dd>

          <dt><code>unknown</code></dt>
          <dd>
            This indicates that the logical port has an unknown set of Ethernet
            addresses.  When an OVN logical switch processes a unicast Ethernet
            frame whose destination MAC address is not in any logical port's
            <ref column="addresses"/> column, it delivers it to the port (or
            ports) whose <ref column="addresses"/> columns include
            <code>unknown</code>.
          </dd>

          <dt><code>dynamic</code></dt>
          <dd>
            Use this keyword to make <code>ovn-northd</code> generate a
            globally unique MAC address and choose an unused IPv4 address with
            the logical port's subnet and store them in the port's <ref
            column="dynamic_addresses"/> column.  <code>ovn-northd</code> will
            use the subnet specified in <ref table="Logical_Switch"
            column="other_config" key="subnet"/> in the port's <ref
            table="Logical_Switch"/>.
          </dd>

          <dt><code>Ethernet address followed by keyword "dynamic"</code></dt>
          <dd>

            <p>
              The keyword <code>dynamic</code> after the MAC address indicates
              that <code>ovn-northd</code> should choose an unused IPv4 address
              from the logical port's subnet and store it with the specified
              MAC in the port's <ref column="dynamic_addresses"/> column.
              <code>ovn-northd</code> will use the subnet specified in <ref
              table="Logical_Switch" column="other_config" key="subnet"/> in
              the port's <ref table="Logical_Switch"/> table.
            </p>

            <p>
              Examples:
            </p>

            <dl>
              <dt><code>80:fa:5b:06:72:b7 dynamic</code></dt>
              <dd>
                This indicates that the logical port owns the specified
                MAC address and <code>ovn-northd</code> should allocate an
                unused IPv4 address for the logical port from the corresponding
                logical switch subnet.
              </dd>
            </dl>
          </dd>

          <dt><code>router</code></dt>
          <dd>
            <p>
              Accepted only when <ref column="type"/> is <code>router</code>.
              This indicates that the Ethernet, IPv4, and IPv6 addresses for
              this logical switch port should be obtained from the connected
              logical router port, as specified by <code>router-port</code> in
              <ref column="options"/>.
            </p>

            <p>
              The resulting addresses are used to populate the logical
              switch's destination lookup, and also for the logical switch
              to generate ARP and ND replies.
            </p>

            <p>
              If the connected logical router port has a
              <code>redirect-chassis</code> specified and the logical router
              has rules specified in <ref column="nat" table="Logical_Router"/>
              with <ref column="external_mac" table="NAT"/>, then those
              addresses are also used to populate the switch's destination
              lookup.
            </p>

            <p>
              Supported only in OVN 2.7 and later.  Earlier versions required
              router addresses to be manually synchronized.
            </p>
          </dd>

        </dl>
      </column>

      <column name="dynamic_addresses">
        <p>
          Addresses assigned to the logical port by <code>ovn-northd</code>, if
          <code>dynamic</code> is specified in <ref column="addresses"/>.
          Addresses will be of the same format as those that populate the <ref
          column="addresses"/> column.  Note that dynamically assigned
          addresses are constructed and managed locally in ovn-northd, so they
          cannot be reconstructed in the event that the database is lost.
        </p>
      </column>

      <column name="port_security">
        <p>
          This column controls the addresses from which the host attached to the
          logical port (``the host'') is allowed to send packets and to which it
          is allowed to receive packets.  If this column is empty, all addresses
          are permitted.
        </p>

        <p>
          Each element in the set must begin with one Ethernet address.
          This would restrict the host to sending packets from and receiving
          packets to the ethernet addresses defined in the logical port's
          <ref column="port_security"/> column. It also restricts the inner
          source MAC addresses that the host may send in ARP and IPv6
          Neighbor Discovery packets. The host is always allowed to receive packets
          to multicast and broadcast Ethernet addresses.
        </p>

        <p>
          Each element in the set may additionally contain one or more IPv4 or
          IPv6 addresses (or both), with optional masks.  If a mask is given, it
          must be a CIDR mask.  In addition to the restrictions described for
          Ethernet addresses above, such an element restricts the IPv4 or IPv6
          addresses from which the host may send and to which it may receive
          packets to the specified addresses.  A masked address, if the host part
          is zero, indicates that the host is allowed to use any address in the
          subnet; if the host part is nonzero, the mask simply indicates the size
          of the subnet. In addition:
        </p>

        <ul>
          <li>
            <p>
              If any IPv4 address is given, the host is also allowed to receive
              packets to the IPv4 local broadcast address 255.255.255.255 and to
              IPv4 multicast addresses (224.0.0.0/4).  If an IPv4 address with a
              mask is given, the host is also allowed to receive packets to the
              broadcast address in that specified subnet.
            </p>

            <p>
              If any IPv4 address is given, the host is additionally restricted
              to sending ARP packets with the specified source IPv4 address.
              (RARP is not restricted.)
            </p>
          </li>

          <li>
            <p>
              If any IPv6 address is given, the host is also allowed to receive
              packets to IPv6 multicast addresses (ff00::/8).
            </p>

            <p>
              If any IPv6 address is given, the host is additionally restricted
              to sending IPv6 Neighbor Discovery Solicitation or Advertisement
              packets with the specified source address or, for solicitations,
              the unspecified address.
            </p>
          </li>
        </ul>

        <p>
          If an element includes an IPv4 address, but no IPv6 addresses, then
          IPv6 traffic is not allowed.  If an element includes an IPv6 address,
          but no IPv4 address, then IPv4 and ARP traffic is not allowed.
        </p>

        <p>
          This column uses the same lexical syntax as the <ref column="match"
          table="Pipeline" db="OVN_Southbound"/> column in the OVN Southbound
          database's <ref table="Pipeline" db="OVN_Southbound"/> table.  Multiple
          addresses within an element may be space or comma separated.
        </p>

        <p>
          This column is provided as a convenience to cloud management systems,
          but all of the features that it implements can be implemented as ACLs
          using the <ref table="ACL"/> table.
        </p>

        <p>
          Examples:
        </p>

        <dl>
          <dt><code>80:fa:5b:06:72:b7</code></dt>
          <dd>
            The host may send traffic from and receive traffic to the specified
            MAC address, and to receive traffic to Ethernet multicast and
            broadcast addresses, but not otherwise.  The host may not send ARP or
            IPv6 Neighbor Discovery packets with inner source Ethernet addresses
            other than the one specified.
          </dd>

          <dt><code>80:fa:5b:06:72:b7 192.168.1.10/24</code></dt>
          <dd>
            This adds further restrictions to the first example.  The host may
            send IPv4 packets from or receive IPv4 packets to only 192.168.1.10,
            except that it may also receive IPv4 packets to 192.168.1.255 (based
            on the subnet mask), 255.255.255.255, and any address in 224.0.0.0/4.
            The host may not send ARPs with a source Ethernet address other than
            80:fa:5b:06:72:b7 or source IPv4 address other than 192.168.1.10.
            The host may not send or receive any IPv6 (including IPv6 Neighbor
            Discovery) traffic.
          </dd>

          <dt><code>"80:fa:5b:12:42:ba", "80:fa:5b:06:72:b7 192.168.1.10/24"</code></dt>
          <dd>
            The host may send traffic from and receive traffic to the
            specified MAC addresses, and
            to receive traffic to Ethernet multicast and broadcast addresses,
            but not otherwise.   With MAC 80:fa:5b:12:42:ba, the host may
            send traffic from and receive traffic to any L3 address.
            With MAC 80:fa:5b:06:72:b7, the host may send IPv4 packets from or
            receive IPv4 packets to only 192.168.1.10, except that it may also
            receive IPv4 packets to 192.168.1.255 (based on the subnet mask),
            255.255.255.255, and any address in 224.0.0.0/4.  The host may not
            send or receive any IPv6 (including IPv6 Neighbor Discovery) traffic.
          </dd>
        </dl>
      </column>
    </group>

    <group title="DHCP">
      <column name="dhcpv4_options">
        This column defines the DHCPv4 Options to be included by the
        <code>ovn-controller</code> when it replies to the DHCPv4 requests.
        Please see the <ref table="DHCP_Options"/> table.
      </column>

      <column name="dhcpv6_options">
        This column defines the DHCPv6 Options to be included by the
        <code>ovn-controller</code> when it replies to the DHCPv6 requests.
        Please see the <ref table="DHCP_Options"/> table.
      </column>
    </group>

    <group title="Naming">
      <column name="external_ids" key="neutron:port_name">
        <p>
          This column gives an optional human-friendly name for the port.  This
          name has no special meaning or purpose other than to provide
          convenience for human interaction with the northbound database.
        </p>

        <p>
          Neutron copies this from its own port object's name.  (Neutron ports
          do are not assigned human-friendly names by default, so it will often
          be empty.)
        </p>
      </column>
    </group>

    <group title="Common Columns">
      <column name="external_ids">
        <p>
          See <em>External IDs</em> at the beginning of this document.
        </p>

        <p>
          The <code>ovn-northd</code> program copies all these pairs into the
          <ref column="external_ids"/> column of the
          <ref table="Port_Binding"/> table in <ref db="OVN_Southbound"/>
          database.
        </p>
      </column>
    </group>
  </table>

  <table name="Address_Set" title="Address Sets">
    <p>
      Each row in this table represents a named set of addresses.
      An address set may contain Ethernet, IPv4, or IPv6 addresses
      with optional bitwise or CIDR masks.
      Address set may ultimately be used in ACLs to compare against
      fields such as <code>ip4.src</code> or <code>ip6.src</code>.
      A single address set must contain addresses of the
      same type. As an example, the following would create an address set
      with three IP addresses:
    </p>

    <pre>
      ovn-nbctl create Address_Set name=set1 addresses='10.0.0.1 10.0.0.2 10.0.0.3'
    </pre>

    <p>
      Address sets may be used in the <ref column="match" table="ACL"/> column
      of the <ref table="ACL"/> table.  For syntax information, see the details
      of the expression language used for the <ref column="match"
      table="Logical_Flow" db="OVN_Southbound"/> column in the <ref
      table="Logical_Flow" db="OVN_Southbound"/> table of the <ref
      db="OVN_Southbound"/> database.
    </p>

    <column name="name">
      A name for the address set.  Names are ASCII and must match
      <code>[a-zA-Z_.][a-zA-Z_.0-9]*</code>.
    </column>

    <column name="addresses">
      The set of addresses in string form.
    </column>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="Port_Group" title="Port Groups">
    <p>
      Each row in this table represents a named group of logical switch ports.
    </p>

    <p>
      Port groups may be used in the <ref column="match" table="ACL"/> column
      of the <ref table="ACL"/> table.  For syntax information, see the details
      of the expression language used for the <ref column="match"
      table="Logical_Flow" db="OVN_Southbound"/> column in the <ref
      table="Logical_Flow" db="OVN_Southbound"/> table of the <ref
      db="OVN_Southbound"/> database.
    </p>

    <p>
      For each port group, there are two address sets generated to the
      <ref table="Address_Set" db="OVN_Southbound"/> table of the
      <ref db="OVN_Southbound"/> database, containing the IP addresses
      of the group of ports, one for IPv4, and the other for IPv6, with
      <ref column="name" table="Address_Set" db="OVN_Southbound"/> being
      the <ref column="name" table="Port_Group" db="OVN_Northbound"/>
      of the <ref table="Port_Group" db="OVN_Northbound"/> followed by
      a suffix <code>_ip4</code> for IPv4 and <code>_ip6</code> for IPv6.
      The generated address sets can be used in the same way as regular
      address sets in the <ref column="match" table="ACL"/> column
      of the <ref table="ACL"/> table. For syntax information, see the details
      of the expression language used for the <ref column="match"
      table="Logical_Flow" db="OVN_Southbound"/> column in the <ref
      table="Logical_Flow" db="OVN_Southbound"/> table of the <ref
      db="OVN_Southbound"/> database.
    </p>

    <column name="name">
      A name for the port group.  Names are ASCII and must match
      <code>[a-zA-Z_.][a-zA-Z_.0-9]*</code>.
    </column>

    <column name="ports">
      The logical switch ports belonging to the group in uuids.
    </column>

    <column name="acls">
      Access control rules that apply to the port group. Applying an ACL
      to a port group has the same effect as applying the ACL to all logical
      lswitches that the ports of the port group belong to.
    </column>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="Load_Balancer" title="load balancer">
    <p>
      Each row represents one load balancer.
    </p>

    <column name="name">
      A name for the load balancer.  This name has no special meaning or
      purpose other than to provide convenience for human interaction with
      the ovn-nb database.
    </column>

    <column name="vips">
      <p>
        A map of virtual IP addresses (and an optional port number with
        <code>:</code> as a separator) associated with this load balancer and
        their corresponding endpoint IP addresses (and optional port numbers
        with <code>:</code> as separators) separated by commas.  If
        the destination IP address (and port number) of a packet leaving a
        container or a VM matches the virtual IP address (and port number)
        provided here as a key, then OVN will statefully replace the
        destination IP address by one of the provided IP address (and port
        number) in this map as a value.  IPv4 and IPv6 addresses are supported
        for load balancing; however a VIP of one address family may not be
        mapped to a destination IP address of a different family.  If
        specifying an IPv6 address with a port, the address portion must be
        enclosed in square brackets.  Examples for keys are "192.168.1.4" and
        "[fd0f::1]:8800".  Examples for value are "10.0.0.1, 10.0.0.2" and
        "20.0.0.10:8800, 20.0.0.11:8800".
      </p>
      <p>
        When the <code>Load_Balancer</code> is added to the
        <code>logical_switch</code>, the VIP has to be in a different subnet
        than the one used for the <code>logical_switch</code>.  Since VIP is
        in a different subnet, you should connect your logical switch to
        either a OVN logical router or a real router (this is because the
        client can now send a packet with VIP as the destination IP address
        and router's mac address as the destination MAC address).
      </p>
    </column>

    <column name="protocol">
      <p>
        Valid protocols are <code>tcp</code> or <code>udp</code>.  This column
        is useful when a port number is provided as part of the
        <code>vips</code> column.  If this column is empty and a port number
        is provided as part of <code>vips</code> column, OVN assumes the
        protocol to be <code>tcp</code>.
      </p>
    </column>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="ACL" title="Access Control List (ACL) rule">
    <p>
      Each row in this table represents one ACL rule for a logical switch
      or a port group that points to it through its <ref column="acls"/>
      column.  The <ref column="action"/> column for the
      highest-<ref column="priority"/> matching row in this table determines a
      packet's treatment.  If no row matches, packets are allowed by default.
      (Default-deny treatment is possible: add a rule with
      <ref column="priority"/> 0, <code>1</code> as <ref column="match"/>,
      and <code>deny</code> as <ref column="action"/>.)
    </p>

    <column name="priority">
      <p>
        The ACL rule's priority.  Rules with numerically higher priority
        take precedence over those with lower.  If two ACL rules with
        the same priority both match, then the one actually applied to a
        packet is undefined.
      </p>

      <p>
        Return traffic from an <code>allow-related</code> flow is always
        allowed and cannot be changed through an ACL.
      </p>
    </column>

    <column name="direction">
      <p>Direction of the traffic to which this rule should apply:</p>
      <ul>
        <li>
          <code>from-lport</code>: Used to implement filters on traffic
          arriving from a logical port.  These rules are applied to the
          logical switch's ingress pipeline.
        </li>
        <li>
          <code>to-lport</code>: Used to implement filters on traffic
          forwarded to a logical port.  These rules are applied to the
          logical switch's egress pipeline.
        </li>
      </ul>
    </column>

    <column name="match">
      <p>
        The packets that the ACL should match, in the same expression
        language used for the <ref column="match" table="Logical_Flow"
        db="OVN_Southbound"/> column in the OVN Southbound database's
        <ref table="Logical_Flow" db="OVN_Southbound"/> table.  The
        <code>outport</code> logical port is only available in the
        <code>to-lport</code> direction (the <code>inport</code> is
        available in both directions).
      </p>

      <p>
        By default all traffic is allowed.  When writing a more
        restrictive policy, it is important to remember to allow flows
        such as ARP and IPv6 neighbor discovery packets.
      </p>

      <p>
        Note that you can not create an ACL matching on a port with
        type=router or type=localnet.
      </p>
    </column>

    <column name="action">
      <p>The action to take when the ACL rule matches:</p>
      <ul>
        <li>
          <code>allow</code>: Forward the packet.
        </li>

        <li>
          <code>allow-related</code>: Forward the packet and related traffic
          (e.g. inbound replies to an outbound connection).
        </li>

        <li>
          <code>drop</code>: Silently drop the packet.
        </li>

        <li>
          <code>reject</code>: Drop the packet, replying with a RST for TCP or
          ICMPv4/ICMPv6 unreachable message for other IPv4/IPv6-based
          protocols.
        </li>
      </ul>
    </column>

    <group title="Logging">
      <p>
        These columns control whether and how OVN logs packets that match an
        ACL.
      </p>

      <column name="log">
        <p>
          If set to <code>true</code>, packets that match the ACL will trigger
          a log message on the transport node or nodes that perform ACL
          processing.  Logging may be combined with any <ref column="action"/>.
        </p>

        <p>
          If set to <code>false</code>, the remaining columns in this group
          have no significance.
        </p>
      </column>

      <column name="name">
        <p>
          This name, if it is provided, is included in log records.  It
          provides the administrator and the cloud management system a way to
          associate a log record with a particular ACL.
        </p>
      </column>

      <column name="severity">
        <p>
          The severity of the ACL.  The severity levels match those of syslog,
          in decreasing level of severity: <code>alert</code>,
          <code>warning</code>, <code>notice</code>, <code>info</code>, or
          <code>debug</code>.  When the column is empty, the default is
          <code>info</code>.
        </p>
      </column>

      <column name="meter">
        <p>
            The name of a meter to rate-limit log messages for the ACL.
            The string must match the <ref column="name" table="meter"/>
            column of a row in the <ref table="Meter"/> table.  By
            default, log messages are not rate-limited.
        </p>
      </column>
    </group>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="Logical_Router" title="L3 logical router">
    <p>
      Each row represents one L3 logical router.
    </p>

    <column name="ports">
      The router's ports.
    </column>

    <column name="static_routes">
      Zero or more static routes for the router.
    </column>

    <column name="enabled">
      This column is used to administratively set router state.  If this column
      is empty or is set to <code>true</code>, the router is enabled.  If this
      column is set to <code>false</code>, the router is disabled.  A disabled
      router has all ingress and egress traffic dropped.
    </column>

    <column name="nat">
      One or more NAT rules for the router.  NAT rules only work on
      Gateway routers, and on distributed routers with one logical router
      port with a <code>redirect-chassis</code> specified.
    </column>

    <column name="load_balancer">
      Load balance a virtual ip address to a set of logical port ip
      addresses.  Load balancer rules only work on the Gateway routers.
    </column>

    <group title="Naming">
      <p>
        These columns provide names for the logical router.  From OVN's
        perspective, these names have no special meaning or purpose other than
        to provide convenience for human interaction with the northbound
        database.  There is no requirement for the name to be unique.  (For a
        unique identifier for a logical router, use its row UUID.)
      </p>

      <p>
        (Originally, <ref column="name"/> was intended to serve the purpose of
        a human-friendly name, but the Neutron integration used it to uniquely
        identify its own router object, in the format
        <code>neutron-<var>uuid</var></code>.  Later on, Neutron started
        propagating the friendly name of a router as <ref column="external_ids"
        key="neutron:router_name"/>.  Perhaps this can be cleaned up someday.)
      </p>

      <column name="name">
        A name for the logical router.
      </column>

      <column name="external_ids" key="neutron:router_name">
        Another name for the logical router.
      </column>
    </group>

    <group title="Options">
      <p>
        Additional options for the logical router.
      </p>

      <column name="options" key="chassis">
        <p>
          If set, indicates that the logical router in question is a Gateway
          router (which is centralized) and resides in the set chassis.  The
          same value is also used by <code>ovn-controller</code> to
          uniquely identify the chassis in the OVN deployment and
          comes from <code>external_ids:system-id</code> in the
          <code>Open_vSwitch</code> table of Open_vSwitch database.
        </p>

        <p>
          The Gateway router can only be connected to a distributed router
          via a switch if SNAT and DNAT are to be configured in the Gateway
          router.
        </p>
      </column>
      <column name="options" key="dnat_force_snat_ip">
        <p>
          If set, indicates the IP address to use to force SNAT a packet
          that has already been DNATed in the gateway router.  When multiple
          gateway routers are configured, a packet can potentially enter any
          of the gateway router, get DNATted and eventually reach the logical
          switch port.  For the return traffic to go back to the same gateway
          router (for unDNATing), the packet needs a SNAT in the first place.
          This can be achieved by setting the above option with a gateway
          specific IP address.
        </p>
      </column>
      <column name="options" key="lb_force_snat_ip">
        <p>
          If set, indicates the IP address to use to force SNAT a packet
          that has already been load-balanced in the gateway router.  When
          multiple gateway routers are configured, a packet can potentially
          enter any of the gateway routers, get DNATted as part of the load-
          balancing and eventually reach the logical switch port.
          For the return traffic to go back to the same gateway router (for
          unDNATing), the packet needs a SNAT in the first place.  This can be
          achieved by setting the above option with a gateway specific IP
          address.
        </p>
      </column>
    </group>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="QoS" title="QoS rule">
    <p>
      Each row in this table represents one QoS rule for a logical switch
      that points to it through its <ref column="qos_rules"/> column.
      Two types of QoS are supported: DSCP marking and metering.  A
      <ref column="match"/> with the highest-<ref column="priority"/>
      will have QoS applied to it.  If the <ref column="action"/> column is
      specified, then matching packets will have DSCP marking applied.
      If the <ref column="bandwdith"/> column is specified, then matching
      packets will have metering applied.  <ref column="action"/> and
      <ref column="bandwdith"/> are not exclusive, so both marking and
      metering by defined for the same QoS entry. If no row matches,
      packets will not have any QoS applied.
    </p>

    <column name="priority">
      <p>
        The QoS rule's priority.  Rules with numerically higher priority
        take precedence over those with lower.  If two QoS rules with
        the same priority both match, then the one actually applied to a
        packet is undefined.
      </p>
    </column>

    <column name="direction">
      <p>
        The value of this field is similar to <ref colun="direction"
        table="ACL" db="OVN_Northbound"/> column in the OVN Northbound
        database's <ref table="ACL" db="OVN_Northbound"/> table.
      </p>
    </column>

    <column name="match">
      <p>
        The packets that the QoS rules should match, in the same expression
        language used for the <ref column="match" table="Logical_Flow"
        db="OVN_Southbound"/> column in the OVN Southbound database's
        <ref table="Logical_Flow" db="OVN_Southbound"/> table.  The
        <code>outport</code> logical port is only available in the
        <code>to-lport</code> direction (the <code>inport</code> is
        available in both directions).
      </p>
    </column>

    <column name="action">
      <p>When specified, matching flows will have DSCP marking applied.</p>
      <ul>
        <li>
          <code>dscp</code>: The value of this action should be in the
          range of 0 to 63 (inclusive).
        </li>
      </ul>
    </column>

    <column name="bandwidth">
      <p>
         When specified, matching packets will have bandwidth metering
         applied.  Traffic over the limit will be dropped.
      </p>
      <ul>
        <li>
          <code>rate</code>: The value of rate limit in kbps.
        </li>
        <li>
          <code>burst</code>: The value of burst rate limit in kilobits.
          This is optional and needs to specify the <code>rate</code>.
        </li>
      </ul>
    </column>

    <column name="external_ids">
      See <em>External IDs</em> at the beginning of this document.
    </column>
  </table>

  <table name="Meter" title="Meter entry">
    <p>
      Each row in this table represents a meter that can be used for QoS or
      rate-limiting.
    </p>

    <column name="name">
      <p>
        A name for this meter.
      </p>

      <p>
        Names that begin with "__" (two underscores) are reserved for
        OVN internal use and should not be added manually.
      </p>
    </column>

    <column name="unit">
      <p>
        The unit for <ref column="rate" table="Meter_Band"/> and
        <ref column="burst_rate" table="Meter_Band"/> parameters in
        the <ref column="bands"/> entry.  <code>kbps</code> specifies
        kilobits per second, and <code>pktps</code> specifies packets
        per second.
      </p>
    </column>

    <column name="bands">
      <p>
        The bands associated with this meter.  Each band specifies a
        rate above which the band is to take the action
        <code>action</code>.  If multiple bands' rates are exceeded,
        then the band with the highest rate among the exceeded bands is
        selected.
      </p>
    </column>

    <column name="external_ids">
      See <em>External IDs</em> at the beginning of this document.
    </column>
  </table>

  <table name="Meter_Band" title="Band for meter entries">
    <p>
      Each row in this table represents a meter band which specifies the
      rate above which the configured action should be applied.  These bands
      are referenced by the <ref column="bands" table="Meter"/> column in
      the <ref table="Meter"/> table.
    </p>

    <column name="action">
      <p>
        The action to execute when this band matches.  The only supported
        action is <code>drop</code>.
      </p>
    </column>

    <column name="rate">
      <p>
        The rate limit for this band, in kilobits per second or bits per
        second, depending on whether the parent <ref table="Meter"/>
        entry's <ref column="unit" table="Meter"/> column specified
        <code>kbps</code> or <code>pktps</code>.
      </p>
    </column>

    <column name="burst_size">
      <p>
        The maximum burst allowed for the band in kilobits or packets,
        depending on whether <code>kbps</code> or <code>pktps</code> was
        selected in the parent <ref table="Meter"/> entry's
        <ref column="unit" table="Meter"/> column.  If the size is zero,
        the switch is free to select some reasonable value depending on
        its configuration.
      </p>
    </column>

    <column name="external_ids">
      See <em>External IDs</em> at the beginning of this document.
    </column>
  </table>

  <table name="Logical_Router_Port" title="L3 logical router port">
    <p>
      A port within an L3 logical router.
    </p>

    <p>
      Exactly one <ref table="Logical_Router"/> row must reference a given
      logical router port.
    </p>

    <column name="name">
      <p>
        A name for the logical router port.
      </p>

      <p>
        In addition to provide convenience for human interaction with the
        northbound database, this column is used as reference by its patch port
        in <ref table="Logical_Switch_Port"/> or another logical router port in
        <ref table="Logical_Router_Port"/>.
      </p>
    </column>

    <column name="gateway_chassis">
      <p>
        If set, this indicates that this logical router port represents
        a distributed gateway port that connects this router to a logical
        switch with a localnet port.  There may be at most one such
        logical router port on each logical router.
      </p>

      <p>
        Several <ref table="Gateway_Chassis"/> can be referenced for a given
        logical router port.  A single <ref table="Gateway_Chassis"/> is
        functionally equivalent to setting
        <ref column="options" key="redirect-chassis"/>.  Refer to the
        description of <ref column="options" key="redirect-chassis"/>
        for additional details on gateway handling.
      </p>

      <p>
        Defining more than one <ref table="Gateway_Chassis"/> will enable
        gateway high availability.  Only one gateway will be active at a
        time.  OVN chassis will use BFD to monitor connectivity to a
        gateway.  If connectivity to the active gateway is interrupted,
        another gateway will become active.
        The <ref column="priority" table="Gateway_Chassis"/> column
        specifies the order that gateways will be chosen by OVN.
      </p>
    </column>

    <column name="networks">
      <p>
        The IP addresses and netmasks of the router.  For example,
        <code>192.168.0.1/24</code> indicates that the router's IP
        address is 192.168.0.1 and that packets destined to
        192.168.0.<var>x</var> should be routed to this port.
      </p>

      <p>
        A logical router port always adds a link-local IPv6 address
        (fe80::/64) automatically generated from the interface's MAC
        address using the modified EUI-64 format.
      </p>
    </column>

    <column name="mac">
      The Ethernet address that belongs to this router port.
    </column>

    <column name="enabled">
      This column is used to administratively set port state.  If this column
      is empty or is set to <code>true</code>, the port is enabled.  If this
      column is set to <code>false</code>, the port is disabled.  A disabled
      port has all ingress and egress traffic dropped.
    </column>

    <group title="ipv6_ra_configs">
      <p>
        This column defines the IPv6 ND RA address mode and ND MTU Option to be
        included by <code>ovn-controller</code> when it replies to the IPv6
        Router solicitation requests.
      </p>

      <column name="ipv6_ra_configs" key="address_mode">
        The address mode to be used for IPv6 address configuration.
        The supported values are:
        <ul>
          <li>
            <code>slaac</code>: Address configuration using Router
            Advertisement (RA) packet. The IPv6 prefixes defined in the
            <ref table="Logical_Router_Port"/> table's
            <ref table="Logical_Router_Port" column="networks"/> column will
            be included in the RA's ICMPv6 option - Prefix information.
          </li>

          <li>
            <code>dhcpv6_stateful</code>: Address configuration using DHCPv6.
          </li>

          <li>
            <code>dhcpv6_stateless</code>: Address configuration using Router
            Advertisement (RA) packet. Other IPv6 options are provided by
            DHCPv6.
          </li>
        </ul>
      </column>

      <column name="ipv6_ra_configs" key="mtu">
        The recommended MTU for the link. Default is 0, which means no MTU
        Option will be included in RA packet replied by ovn-controller.
        Per RFC 2460, the mtu value is recommended no less than 1280, so
        any mtu value less than 1280 will be considered as no MTU Option.
      </column>

      <column name="ipv6_ra_configs" key="send_periodic">
        If set to true, then this router interface will send router
        advertisements periodically.  The default is false.
      </column>

      <column name="ipv6_ra_configs" key="max_interval">
        The maximum number of seconds to wait between sending periodic router
        advertisements.  This option has no effect if <ref
        column="ipv6_ra_configs" key="send_periodic"/> is false.  The default
        is 600.
      </column>

      <column name="ipv6_ra_configs" key="min_interval">
        The minimum number of seconds to wait between sending periodic router
        advertisements.  This option has no effect if <ref
        column="ipv6_ra_configs" key="send_periodic"/> is false.  The default
        is one-third of <ref column="ipv6_ra_configs" key="max_interval"/>,
        i.e. 200 seconds if that key is unset.
      </column>
    </group>

    <group title="Options">
      <p>
        Additional options for the logical router port.
      </p>

      <column name="options" key="redirect-chassis">
        <p>
          If set, this indicates that this logical router port represents
          a distributed gateway port that connects this router to a logical
          switch with a localnet port.  There may be at most one such
          logical router port on each logical router.
        </p>

        <p>
          Even when a <code>redirect-chassis</code> is specified, the
          logical router port still effectively resides on each chassis.
          However, due to the implications of the use of L2 learning in the
          physical network, as well as the need to support advanced features
          such as one-to-many NAT (aka IP masquerading), a subset of the
          logical router processing is handled in a centralized manner on
          the specified <code>redirect-chassis</code>.
        </p>

        <p>
          When this option is specified, the peer logical switch port's
          <ref column="addresses" table="Logical_Switch_Port"/> must be
          set to <code>router</code>.  With this setting, the <ref
          column="external_mac" table="NAT"/>s specified in NAT rules are
          automatically programmed in the peer logical switch's
          destination lookup on the chassis where the <ref
          column="logical_port" table="NAT"/> resides.  In addition, the
          logical router's MAC address is automatically programmed in the
          peer logical switch's destination lookup flow on the
          <code>redirect-chassis</code>.
        </p>

        <p>
          When this option is specified and it is desired to generate
          gratuitous ARPs for NAT addresses, then the peer logical switch
          port's <ref column="options" key="nat-addresses"
          table="Logical_Switch_Port"/> should be set to
          <code>router</code>.
        </p>

        <p>
          While <ref column="options" key="redirect-chassis"/> is still
          supported for backwards compatibility, it is now preferred to
          specify one or more <ref column="gateway_chassis"/> instead.
          It is functionally equivalent, but allows you to specify multiple
          chassis to enable high availability.
        </p>
      </column>

      <column name="options" key="reside-on-redirect-chassis">
        <p>
          Generally routing is distributed in <code>OVN</code>. The packet
          from a logical port which needs to be routed hits the router pipeline
          in the source chassis. For the East-West traffic, the packet is
          sent directly to the destination chassis. For the outside traffic
          the packet is sent to the gateway chassis.
        </p>

        <p>
          When this option is set, <code>OVN</code> considers this only if
        </p>

        <ul>
          <li>
            The logical router to which this logical router port belongs to
            has a distributed gateway port.
          </li>

          <li>
            The peer's logical switch has a localnet port (representing
            a VLAN tagged network)
          </li>
        </ul>

        <p>
          When this option is set to <code>true</code>, then the packet
          which needs to be routed hits the router pipeline in the chassis
          hosting the distributed gateway router port. The source chassis
          pushes out this traffic via the localnet port. With this the
          East-West traffic is no more distributed and will always go through
          the gateway chassis.
        </p>

        <p>
          Without this option set, for any traffic destined to outside from a
          logical port which belongs to a logical switch with localnet port,
          the source chassis will send the traffic to the gateway chassis via
          the tunnel port instead of the localnet port and this could cause MTU
          issues.
        </p>
      </column>
    </group>

    <group title="Attachment">
      <p>
        A given router port serves one of two purposes:
      </p>

      <ul>
        <li>
          To attach a logical switch to a logical router.  A logical router
          port of this type is referenced by exactly one <ref
          table="Logical_Switch_Port"/> of type <code>router</code>.
          The value of <ref column="name"/> is set as
          <code>router-port</code> in column <ref column="options"/> of
          <ref table="Logical_Switch_Port"/>.  In this case <ref
          column="peer"/> column is empty.
        </li>

        <li>
          To connect one logical router to another.  This requires a pair of
          logical router ports, each connected to a different router.  Each
          router port in the pair specifies the other in its <ref
          column="peer"/> column.  No <ref table="Logical_Switch"/> refers to
          the router port.
        </li>
      </ul>

      <column name="peer">
        <p>
          For a router port used to connect two logical routers, this
          identifies the other router port in the pair by <ref column="name"/>.
        </p>

        <p>
          For a router port attached to a logical switch, this column is empty.
        </p>
      </column>
    </group>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="Logical_Router_Static_Route" title="Logical router static routes">
    <p>
      Each record represents a static route.
    </p>

    <p>
      When multiple routes match a packet, the longest-prefix match is chosen.
      For a given prefix length, a <code>dst-ip</code> route is preferred over
      a <code>src-ip</code> route.
    </p>

    <column name="ip_prefix">
      <p>
        IP prefix of this route (e.g. 192.168.100.0/24).
      </p>
    </column>

    <column name="policy">
      <p>
        If it is specified, this setting describes the policy used to make
        routing decisions.  This setting must be one of the following strings:
      </p>
      <ul>
        <li>
          <code>src-ip</code>: This policy sends the packet to the
          <ref column="nexthop"/> when the packet's source IP address matches
          <ref column="ip_prefix"/>.
       </li>
        <li>
          <code>dst-ip</code>: This policy sends the packet to the
          <ref column="nexthop"/> when the packet's destination IP address
          matches <ref column="ip_prefix"/>.
        </li>
      </ul>
      <p>
        If not specified, the default is <code>dst-ip</code>.
     </p>
    </column>

    <column name="nexthop">
      <p>
        Nexthop IP address for this route.  Nexthop IP address should be the IP
        address of a connected router port or the IP address of a logical port.
      </p>
    </column>

    <column name="output_port">
      <p>
        The name of the <ref table="Logical_Router_Port"/> via which the packet
        needs to be sent out.  This is optional and when not specified,
        OVN will automatically figure this out based on the
        <ref column="nexthop"/>.  When this is specified and there are
        multiple IP addresses on the router port and none of them are in the
        same subnet of <ref column="nexthop"/>, OVN chooses the first IP
        address as the one via which the <ref column="nexthop"/> is reachable.
      </p>
    </column>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>

  </table>

  <table name="NAT" title="NAT rules">
    <p>
      Each record represents a NAT rule.
    </p>

    <column name="type">
      <p>Type of the NAT rule.</p>
      <ul>
        <li>
          When <ref column="type"/> is <code>dnat</code>, the externally
          visible IP address <ref column="external_ip"/> is DNATted to the IP
          address <ref column="logical_ip"/> in the logical space.
        </li>
        <li>
          When <ref column="type"/> is <code>snat</code>, IP packets
          with their source IP address that either matches the IP address
          in <ref column="logical_ip"/> or is in the network provided by
          <ref column="logical_ip"/> is SNATed into the IP address in
          <ref column="external_ip"/>.
        </li>
        <li>
          When <ref column="type"/> is <code>dnat_and_snat</code>, the
          externally visible IP address <ref column="external_ip"/> is
          DNATted to the IP address <ref column="logical_ip"/> in the
          logical space. In addition, IP packets with the source IP
          address that matches <ref column="logical_ip"/> is SNATed into
          the IP address in <ref column="external_ip"/>.
        </li>
      </ul>
    </column>

    <column name="external_ip">
      An IPv4 address.
    </column>

    <column name="external_mac">
      <p>
        A MAC address.
      </p>

      <p>
        This is only used on the gateway port on distributed routers.
        This must be specified in order for the NAT rule to be
        processed in a distributed manner on all chassis.  If this is
        not specified for a NAT rule on a distributed router, then
        this NAT rule will be processed in a centralized manner on
        the gateway port instance on the <code>redirect-chassis</code>.
      </p>

      <p>
        This MAC address must be unique on the logical switch that the
        gateway port is attached to.  If the MAC address used on the
        <ref column="logical_port"/> is globally unique, then that MAC
        address can be specified as this <ref column="external_mac"/>.
      </p>
    </column>

    <column name="logical_ip">
      An IPv4 network (e.g 192.168.1.0/24) or an IPv4 address.
    </column>

    <column name="logical_port">
      <p>
        The name of the logical port where the <ref column="logical_ip"/>
        resides.
      </p>

      <p>
        This is only used on distributed routers.  This must be
        specified in order for the NAT rule to be processed in a
        distributed manner on all chassis.  If this is not specified
        for a NAT rule on a distributed router, then this NAT rule
        will be processed in a centralized manner on the gateway
        port instance on the <code>redirect-chassis</code>.
      </p>
    </column>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>

  </table>

  <table name="DHCP_Options" title="DHCP options">
    <p>
      OVN implements native DHCPv4 support which caters to the common
      use case of providing an IPv4 address to a booting instance by
      providing stateless replies to DHCPv4 requests based on statically
      configured address mappings. To do this it allows a short list of
      DHCPv4 options to be configured and applied at each compute host
      running <code>ovn-controller</code>.
    </p>

    <p>
      OVN also implements native DHCPv6 support which provides stateless
      replies to DHCPv6 requests.
    </p>

    <column name="cidr">
      <p>
        The DHCPv4/DHCPv6 options will be included if the logical port has its
        IP address in this <ref column="cidr"/>.
      </p>
    </column>

    <group title="DHCPv4 options">
      <p>
        The CMS should define the set of DHCPv4 options as key/value pairs
        in the <ref column="options"/> column of this table. For
        <code>ovn-controller</code> to include these DHCPv4 options, the
        <ref column="dhcpv4_options"/> of <ref table="Logical_Switch_Port"/>
        should refer to an entry in this table.
      </p>

      <group title="Mandatory DHCPv4 options">
        <p>
          The following options must be defined.
        </p>

        <column name="options" key="server_id">
          The IP address for the DHCP server to use.  This should be in the
          subnet of the offered IP.  This is also included in the DHCP offer as
          option 54, ``server identifier.''
        </column>

        <column name="options" key="server_mac">
          The Ethernet address for the DHCP server to use.
        </column>

        <column name="options" key="lease_time"
                type='{"type": "integer", "minInteger": 0, "maxInteger": 4294967295}'>
          <p>
            The offered lease time in seconds,
          </p>

          <p>
            The DHCPv4 option code for this option is 51.
          </p>
        </column>
      </group>

      <group title="IPv4 DHCP Options">
        <p>
          Below are the supported DHCPv4 options whose values are an IPv4
          address, e.g. <code>192.168.1.1</code>.  Some options accept multiple
          IPv4 addresses enclosed within curly braces, e.g. <code>{192.168.1.2,
          192.168.1.3}</code>. Please refer to RFC 2132 for more details on
          DHCPv4 options and their codes.
        </p>

        <column name="options" key="router">
          <p>
            The IP address of a gateway for the client to use.  This should be
            in the subnet of the offered IP.  The DHCPv4 option code for this
            option is 3.
          </p>
        </column>

        <column name="options" key="netmask">
          <p>
            The DHCPv4 option code for this option is 1.
          </p>
        </column>

        <column name="options" key="dns_server">
          <p>
            The DHCPv4 option code for this option is 6.
          </p>
        </column>

        <column name="options" key="log_server">
          <p>
            The DHCPv4 option code for this option is 7.
          </p>
        </column>

        <column name="options" key="lpr_server">
          <p>
            The DHCPv4 option code for this option is 9.
          </p>
        </column>

        <column name="options" key="swap_server">
          <p>
            The DHCPv4 option code for this option is 16.
          </p>
        </column>

        <column name="options" key="policy_filter">
          <p>
            The DHCPv4 option code for this option is 21.
          </p>
        </column>

        <column name="options" key="router_solicitation">
          <p>
            The DHCPv4 option code for this option is 32.
          </p>
        </column>

        <column name="options" key="nis_server">
          <p>
            The DHCPv4 option code for this option is 41.
          </p>
        </column>

        <column name="options" key="ntp_server">
          <p>
            The DHCPv4 option code for this option is 42.
          </p>
        </column>

        <column name="options" key="tftp_server">
          <p>
            The DHCPv4 option code for this option is 66.
          </p>
        </column>

        <column name="options" key="classless_static_route">
          <p>
            The DHCPv4 option code for this option is 121.
          </p>

          <p>
             This option can contain one or more static routes, each of which
             consists of a destination descriptor and the IP address of the
             router that should be used to reach that destination. Please see
             RFC 3442 for more details.
          </p>

          <p>
            Example: <code>{30.0.0.0/24,10.0.0.10, 0.0.0.0/0,10.0.0.1}</code>
          </p>
        </column>

        <column name="options" key="ms_classless_static_route">
          <p>
            The DHCPv4 option code for this option is 249. This option is
            similar to <code>classless_static_route</code> supported by
            Microsoft Windows DHCPv4 clients.
          </p>
        </column>

      </group>

      <group title="Boolean DHCP Options">
        <p>
          These options accept a Boolean value, expressed as <code>0</code> for
          false or <code>1</code> for true.
        </p>

        <column name="options" key="ip_forward_enable"
                type='{"type": "string", "enum": ["set", ["0", "1"]]}'>
          <p>
            The DHCPv4 option code for this option is 19.
          </p>
        </column>

        <column name="options" key="router_discovery"
                type='{"type": "string", "enum": ["set", ["0", "1"]]}'>
          <p>
            The DHCPv4 option code for this option is 31.
          </p>
        </column>

        <column name="options" key="ethernet_encap"
                type='{"type": "string", "enum": ["set", ["0", "1"]]}'>
          <p>
            The DHCPv4 option code for this option is 36.
          </p>
        </column>
      </group>

      <group title="Integer DHCP Options">
        <p>
          These options accept a nonnegative integer value.
        </p>

        <column name="options" key="default_ttl"
                type='{"type": "integer", "minInteger": 0, "maxInteger": 255}'>
          The DHCPv4 option code for this option is 23.
        </column>

        <column name="options" key="tcp_ttl"
                type='{"type": "integer", "minInteger": 0, "maxInteger": 255}'>
          The DHCPv4 option code for this option is 37.
        </column>

        <column name="options" key="mtu"
                type='{"type": "integer", "minInteger": 68, "maxInteger": 65535}'>
          The DHCPv4 option code for this option is 26.
        </column>

        <column name="options" key="T1"
                type='{"type": "integer", "minInteger": 68, "maxInteger": 4294967295}'>
          This specifies the time interval from address assignment until the
          client begins trying to renew its address.  The DHCPv4 option code
          for this option is 58.
        </column>

        <column name="options" key="T2"
                type='{"type": "integer", "minInteger": 68, "maxInteger": 4294967295}'>
          This specifies the time interval from address assignment until the
          client begins trying to rebind its address.  The DHCPv4 option code
          for this option is 59.
        </column>
      </group>

      <group title="String DHCP Options">
        <p>
          These options accept a string value.
        </p>

        <column name="options" key="wpad">
          <p>
            The DHCPv4 option code for this option is 252. This option is used
            as part of web proxy auto discovery to provide a URL for a web
            proxy.
          </p>
        </column>

        <column name="options" key="bootfile_name">
          <p>
            The DHCPv4 option code for this option is 67. This option is used
            to identify a bootfile.
          </p>
        </column>

        <column name="options" key="path_prefix">
          <p>
            The DHCPv4 option code for this option is 210. In PXELINUX'
            case this option is used to set a common path prefix,
            instead of deriving it from the bootfile name.
          </p>
        </column>

        <column name="options" key="tftp_server_address">
          <p>
            The DHCPv4 option code for this option is 150. The option
            contains one or more IPv4 addresses that the client MAY
            use. This option is Cisco proprietary, the IEEE standard
            that matches with this requirement is option 66 (tftp_server).
          </p>
        </column>
      </group>
    </group>

    <group title="DHCPv6 options">
      <p>
        OVN also implements native DHCPv6 support. The CMS should define
        the set of DHCPv6 options as key/value pairs. The define DHCPv6
        options will be included in the DHCPv6 response to the DHCPv6
        Solicit/Request/Confirm packet from the logical ports having the
        IPv6 addresses in the <ref column="cidr"/>.
      </p>

      <group title="Mandatory DHCPv6 options">
        <p>
          The following options must be defined.
        </p>

        <column name="options" key="server_id">
          <p>
            The Ethernet address for the DHCP server to use. This is also
            included in the DHCPv6 reply as option 2, ``Server Identifier''
            to carry a DUID identifying a server between a client and a server.
            <code>ovn-controller</code> defines DUID based on
            Link-layer Address [DUID-LL].
          </p>
        </column>
      </group>

      <group title="IPv6 DHCPv6 options">
        <p>
          Below are the supported DHCPv6 options whose values are an IPv6
          address, e.g. <code>aef0::4</code>.  Some options accept multiple
          IPv6 addresses enclosed within curly braces, e.g. <code>{aef0::4,
          aef0::5}</code>. Please refer to RFC 3315 for more details on
          DHCPv6 options and their codes.
        </p>

        <column name="options" key="dns_server">
          <p>
            The DHCPv6 option code for this option is 23. This option specifies
            the DNS servers that the VM should use.
          </p>
        </column>
      </group>

      <group title="String DHCPv6 options">
        <p>
          These options accept string values.
        </p>

        <column name="options" key="domain_search">
          <p>
            The DHCPv6 option code for this option is 24. This option specifies
            the domain search list the client should use to resolve hostnames
            with DNS.
          </p>

          <p>
            Example: <code>"ovn.org"</code>.
          </p>
        </column>

        <column name="options" key="dhcpv6_stateless">
          <p>
            This option specifies the OVN native DHCPv6 will work in stateless
            mode, which means OVN native DHCPv6 will not offer IPv6 addresses
            for VM/VIF ports, but only reply other configurations, such as
            DNS and domain search list. When setting this option with string
            value "true", VM/VIF will configure IPv6 addresses by stateless
            way. Default value for this option is false.
          </p>
        </column>
      </group>
    </group>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="Connection" title="OVSDB client connections.">
    <p>
      Configuration for a database connection to an Open vSwitch database
      (OVSDB) client.
    </p>

    <p>
      This table primarily configures the Open vSwitch database server
      (<code>ovsdb-server</code>).
    </p>

    <p>
      The Open vSwitch database server can initiate and maintain active
      connections to remote clients.  It can also listen for database
      connections.
    </p>

    <group title="Core Features">
      <column name="target">
        <p>Connection methods for clients.</p>
        <p>
          The following connection methods are currently supported:
        </p>
        <dl>
          <dt><code>ssl:<var>host</var></code>[<code>:<var>port</var></code>]</dt>
          <dd>
            <p>
              The specified SSL <var>port</var> on the host at the given
              <var>host</var>, which can either be a DNS name (if built with
              unbound library) or an IP address. A valid SSL configuration must
              be provided when this form is used, this configuration can be
              specified via command-line options or the <ref table="SSL"/> table.
            </p>
            <p>
              If <var>port</var> is not specified, it defaults to 6640.
            </p>
            <p>
              SSL support is an optional feature that is not always
              built as part of Open vSwitch.
            </p>
          </dd>

          <dt><code>tcp:<var>host</var></code>[<code>:<var>port</var></code>]</dt>
          <dd>
            <p>
              The specified TCP <var>port</var> on the host at the given
              <var>host</var>, which can either be a DNS name (if built with
              unbound library) or an IP address.  If <var>host</var> is an IPv6
              address, wrap it in square brackets, e.g. <code>tcp:[::1]:6640</code>.
            </p>
            <p>
              If <var>port</var> is not specified, it defaults to 6640.
            </p>
          </dd>
          <dt><code>pssl:</code>[<var>port</var>][<code>:<var>host</var></code>]</dt>
          <dd>
            <p>
              Listens for SSL connections on the specified TCP <var>port</var>.
              Specify 0 for <var>port</var> to have the kernel automatically
              choose an available port.  If <var>host</var>, which can either
              be a DNS name (if built with unbound library) or an IP address,
              is specified, then connections are restricted to the resolved or
              specified local IPaddress (either IPv4 or IPv6 address).  If
              <var>host</var> is an IPv6 address, wrap in square brackets,
              e.g. <code>pssl:6640:[::1]</code>.  If <var>host</var> is not
              specified then it listens only on IPv4 (but not IPv6) addresses.
              A valid SSL configuration must be provided when this form is used,
             this can be specified either via command-line options or the
             <ref table="SSL"/> table.
            </p>
            <p>
              If <var>port</var> is not specified, it defaults to 6640.
            </p>
            <p>
              SSL support is an optional feature that is not always built as
              part of Open vSwitch.
            </p>
          </dd>
          <dt><code>ptcp:</code>[<var>port</var>][<code>:<var>host</var></code>]</dt>
          <dd>
            <p>
              Listens for connections on the specified TCP <var>port</var>.
              Specify 0 for <var>port</var> to have the kernel automatically
              choose an available port.  If <var>host</var>, which can either
              be a DNS name (if built with unbound library) or an IP address,
              is specified, then connections are restricted to the resolved or
              specified local IP address (either IPv4 or IPv6 address).  If
              <var>host</var> is an IPv6 address, wrap it in square brackets,
              e.g. <code>ptcp:6640:[::1]</code>.  If <var>host</var> is not
              specified then it listens only on IPv4 addresses.
            </p>
            <p>
              If <var>port</var> is not specified, it defaults to 6640.
            </p>
          </dd>
        </dl>
        <p>When multiple clients are configured, the <ref column="target"/>
        values must be unique.  Duplicate <ref column="target"/> values yield
        unspecified results.</p>
      </column>
    </group>

    <group title="Client Failure Detection and Handling">
      <column name="max_backoff">
        Maximum number of milliseconds to wait between connection attempts.
        Default is implementation-specific.
      </column>

      <column name="inactivity_probe">
        Maximum number of milliseconds of idle time on connection to the client
        before sending an inactivity probe message.  If Open vSwitch does not
        communicate with the client for the specified number of seconds, it
        will send a probe.  If a response is not received for the same
        additional amount of time, Open vSwitch assumes the connection has been
        broken and attempts to reconnect.  Default is implementation-specific.
        A value of 0 disables inactivity probes.
      </column>
    </group>

    <group title="Status">
      <p>
        Key-value pair of <ref column="is_connected"/> is always updated.
        Other key-value pairs in the status columns may be updated depends
        on the <ref column="target"/> type.
      </p>

      <p>
        When <ref column="target"/> specifies a connection method that
        listens for inbound connections (e.g. <code>ptcp:</code> or
        <code>punix:</code>), both <ref column="n_connections"/> and
        <ref column="is_connected"/> may also be updated while the
        remaining key-value pairs are omitted.
      </p>

      <p>
        On the other hand, when <ref column="target"/> specifies an
        outbound connection, all key-value pairs may be updated, except
        the above-mentioned two key-value pairs associated with inbound
        connection targets. They are omitted.
      </p>

    <column name="is_connected">
        <code>true</code> if currently connected to this client,
        <code>false</code> otherwise.
      </column>

      <column name="status" key="last_error">
        A human-readable description of the last error on the connection
        to the manager; i.e. <code>strerror(errno)</code>.  This key
        will exist only if an error has occurred.
      </column>

      <column name="status" key="state"
              type='{"type": "string", "enum": ["set", ["VOID", "BACKOFF", "CONNECTING", "ACTIVE", "IDLE"]]}'>
        <p>
          The state of the connection to the manager:
        </p>
        <dl>
          <dt><code>VOID</code></dt>
          <dd>Connection is disabled.</dd>

          <dt><code>BACKOFF</code></dt>
          <dd>Attempting to reconnect at an increasing period.</dd>

          <dt><code>CONNECTING</code></dt>
          <dd>Attempting to connect.</dd>

          <dt><code>ACTIVE</code></dt>
          <dd>Connected, remote host responsive.</dd>

          <dt><code>IDLE</code></dt>
          <dd>Connection is idle.  Waiting for response to keep-alive.</dd>
        </dl>
        <p>
          These values may change in the future.  They are provided only for
          human consumption.
        </p>
      </column>

      <column name="status" key="sec_since_connect"
              type='{"type": "integer", "minInteger": 0}'>
        The amount of time since this client last successfully connected
        to the database (in seconds). Value is empty if client has never
        successfully been connected.
      </column>

      <column name="status" key="sec_since_disconnect"
              type='{"type": "integer", "minInteger": 0}'>
        The amount of time since this client last disconnected from the
        database (in seconds). Value is empty if client has never
        disconnected.
      </column>

      <column name="status" key="locks_held">
        Space-separated list of the names of OVSDB locks that the connection
        holds.  Omitted if the connection does not hold any locks.
      </column>

      <column name="status" key="locks_waiting">
        Space-separated list of the names of OVSDB locks that the connection is
        currently waiting to acquire.  Omitted if the connection is not waiting
        for any locks.
      </column>

      <column name="status" key="locks_lost">
        Space-separated list of the names of OVSDB locks that the connection
        has had stolen by another OVSDB client.  Omitted if no locks have been
        stolen from this connection.
      </column>

      <column name="status" key="n_connections"
              type='{"type": "integer", "minInteger": 2}'>
        When <ref column="target"/> specifies a connection method that
        listens for inbound connections (e.g. <code>ptcp:</code> or
        <code>pssl:</code>) and more than one connection is actually active,
        the value is the number of active connections.  Otherwise, this
        key-value pair is omitted.
      </column>

      <column name="status" key="bound_port" type='{"type": "integer"}'>
        When <ref column="target"/> is <code>ptcp:</code> or
        <code>pssl:</code>, this is the TCP port on which the OVSDB server is
        listening.  (This is particularly useful when <ref
        column="target"/> specifies a port of 0, allowing the kernel to
        choose any available port.)
      </column>
    </group>

    <group title="Common Columns">
      The overall purpose of these columns is described under <code>Common
      Columns</code> at the beginning of this document.

      <column name="external_ids"/>
      <column name="other_config"/>
    </group>
  </table>
  <table name="DNS" title="Native DNS resolution">
    <p>
      Each row in this table stores the DNS records. The
      <ref table="Logical_Switch"/> table's <ref table="Logical_Switch"
      column="dns_records"/> references these records.
    </p>

    <column name="records">
      Key-value pair of DNS records with <code>DNS query name</code> as the key
      and value as a string of IP address(es) separated by comma or space.

      <p><b>Example: </b> "vm1.ovn.org" = "10.0.0.4 aef0::4"</p>
    </column>

    <column name="external_ids">
      See <em>External IDs</em> at the beginning of this document.
    </column>
  </table>
  <table name="SSL">
    SSL configuration for ovn-nb database access.

    <column name="private_key">
      Name of a PEM file containing the private key used as the switch's
      identity for SSL connections to the controller.
    </column>

    <column name="certificate">
      Name of a PEM file containing a certificate, signed by the
      certificate authority (CA) used by the controller and manager,
      that certifies the switch's private key, identifying a trustworthy
      switch.
    </column>

    <column name="ca_cert">
      Name of a PEM file containing the CA certificate used to verify
      that the switch is connected to a trustworthy controller.
    </column>

    <column name="bootstrap_ca_cert">
      If set to <code>true</code>, then Open vSwitch will attempt to
      obtain the CA certificate from the controller on its first SSL
      connection and save it to the named PEM file. If it is successful,
      it will immediately drop the connection and reconnect, and from then
      on all SSL connections must be authenticated by a certificate signed
      by the CA certificate thus obtained.  <em>This option exposes the
      SSL connection to a man-in-the-middle attack obtaining the initial
      CA certificate.</em>  It may still be useful for bootstrapping.
    </column>

    <column name="ssl_protocols">
      List of SSL protocols to be enabled for SSL connections. The default
      when this option is omitted is <code>TLSv1,TLSv1.1,TLSv1.2</code>.
    </column>

    <column name="ssl_ciphers">
      List of ciphers (in OpenSSL cipher string format) to be supported
      for SSL connections. The default when this option is omitted is
      <code>HIGH:!aNULL:!MD5</code>.
    </column>

    <group title="Common Columns">
      The overall purpose of these columns is described under <code>Common
      Columns</code> at the beginning of this document.

      <column name="external_ids"/>
    </group>
  </table>
  <table name="Gateway_Chassis">
    <p>
      Association of one or more chassis to a logical router port. The traffic
      going out through an specific router port will be redirected to a
      chassis, or a set of them in high availability configurations.
      A single <ref table="Gateway_Chassis"/> is equivalent to setting
      <ref column="options" key="redirect-chassis"/>.  Using
      <ref table="Gateway_Chassis"/> allows associating multiple prioritized
      chassis with a single logical router port.
    </p>

    <column name="name">
      <p>
        Name of the <ref table="Gateway_Chassis"/>.
      </p>
      <p>
        A suggested, but not required naming convention is
        <code>${port_name}_${chassis_name}</code>.
      </p>
    </column>

    <column name="chassis_name">
      <p>
        Name of the chassis that we want to redirect traffic through for the
        associated logical router port.  The value must match the
        <ref db="OVN_Southbound" table="Chassis" column="name"/> column
        of the <ref db="OVN_Southbound" table="Chassis"/> table in the
        <ref db="OVN_Southbound"/> database.
      </p>
    </column>

    <column name="priority">
      <p>
        This is the priority of a chassis among all
        <ref table="Gateway_Chassis"/> belonging to the same logical router
        port.
      </p>
    </column>

    <column name="options">
      Reserved for future use.
    </column>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

</database>
